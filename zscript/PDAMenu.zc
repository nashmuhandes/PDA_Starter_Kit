/****************************************************************************

MIT License

Copyright (c) 2019 - 2021 Nash Muhandes

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

****************************************************************************/

//===========================================================================
//
// PDAMenu
// A custom PDA menu
// Powered by ZForms
// ZForms is created by Gutawer and phantombeta
//
//===========================================================================

class PDAMenu : PDAGenericMenu
{
	PDAMenuHandler handler;
	Font fnt;
	PlayerPawn pmo;

	// Colors
	int fntColor;
	int pdaListUnreadColor;
	int pdaListReadColor;
	Color UIColor;

	String backgroundPic;

	// Sizes and positions
	int baseResWidth;
	int baseResHeight;
	Vector2 backgroundPos;
	Vector2 backgroundSize;
	Vector2 pdaListPos;
	Vector2 pdaListSize;
	Vector2 pdaContentPos;
	Vector2 pdaContentSize;

	// Misc variables

	// How many number of lines to scroll with the mousewheel
	int mouseScrollAmount;

	// How many number of lines to scroll with the keyboard/gamepad
	int keyScrollAmount;

	// Width of the scrollbar
	int scrollbarWidth;

	// Widgets

	// PDA list (left)
	PDAOwnedPDAsList pdaList;

	// PDA content (right)
	PDAImage pdaContentBackground;
	PDAContentText pdaContentText;

	//===========================================================================
	//
	//
	//
	//
	//===========================================================================

	override void Init(Menu parent)
	{
		Super.Init(parent);

		pmo = players[consoleplayer].mo;

		PDAConfig();

		// Assign the PDAMenuHandler
		handler = new('PDAMenuHandler');
		handler.menu = self;

		// Create the PDA background
		let background = new('PDAImage').Init(backgroundPos, backgroundSize, backgroundPic, PDAImage.AlignType_TopLeft);
		background.Pack(mainFrame);

		// Create the PDA list
		pdaList = PDAOwnedPDAsList(new('PDAOwnedPDAsList').Init(pdaListPos, pdaListSize, self, "ActivatePDA"));

		// Populate the PDA list
		PopulatePDAList();

		// Create the content background frame
		pdaContentBackground = new('PDAImage').Init(pdaContentPos, pdaContentSize, "", PDAImage.AlignType_Center);
		pdaContentBackground.Pack(mainFrame);

		// Create the content frame
		pdaContentText = PDAContentText(new('PDAContentText').Init(pdaContentPos, pdaContentSize, self));

		// Always highlight the first entry when the menu spawns
		if (pdaList)
		{
			pdaList.UpdateSelection();
		}

		// Play menu open sound
		Menu.MenuSound("PDA/Interface/Menu_Open");
	}

	override void Ticker(void)
	{
		if (!pmo)
		{
			Console.Printf("Error: PDAMenu without player pawn");
			Close();
			return;
		}
		Super.Ticker();
	}

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		if (pdaContentText)
		{
			switch (mkey)
			{
				// PDA selection
				case MKEY_Up:
					pdaList.SelectPreviousItem();
					break;
				case MKEY_Down:
					pdaList.SelectNextItem();
					break;

				// Read a PDA
				case MKEY_Enter:
					if (pdaList.items.Size() > 0 && pdaList.currentSelection >= 0)
					{
						handler.ButtonClickCommand(pdaList.items[pdaList.currentSelection], pdaList.items[pdaList.currentSelection].command);
					}
					break;

				// Scroll content text
				case MKEY_PageUp:
					pdaContentText.ScrollUp(keyScrollAmount);
					break;
				case MKEY_PageDown:
					pdaContentText.ScrollDown(keyScrollAmount);
					break;

				// Close the menu and play the close menu sound
				case MKEY_Back:
					Menu.MenuSound("PDA/Interface/Menu_Close");
					Close();
					return true;

				default:
					break;
			}
		}

		return Super.MenuEvent(mkey, fromcontroller);
	}

	override void OnDestroy(void)
	{
		PlayerInfo p = players[consoleplayer];
		if (pmo && p && players[consoleplayer].mo)
		{
			// Stop any PDA sounds currently playing when exiting the menu
			let pdaReader = pmo.FindInventory("PDAReader", true);
			if (pdaReader && pmo == players[consoleplayer].mo)
			{
				EventHandler.SendNetworkEvent("EV_StopPDASound");
			}
		}

		Super.OnDestroy();
	}

	//===========================================================================
	//
	//
	//
	//
	//===========================================================================

	void DoPDAConfig(Vector2 baseRes, String fntName,
		Vector3 uiClr, int fntClr, int unreadClr, int readClr,
		String bgPic, Vector2 bgPos, Vector2 bgSize,
		Vector2 listPos, Vector2 listSize,
		Vector2 ctPos, Vector2 ctSize,
		int mScrAmount, int kScrAmount,
		int scrBarWidth)
	{
		baseResWidth = int(baseRes.X);
		baseResHeight = int(baseRes.Y);
		SetBaseResolution((baseResWidth, baseResHeight));

		fnt = Font.GetFont(fntName);

		UIColor = Color(int(uiClr.X), int(uiClr.Y), int(uiClr.Z));
		fntColor = fntClr;
		pdaListUnreadColor = unreadClr;
		pdaListReadColor = readClr;

		backgroundPic = bgPic;
		backgroundPos = bgPos;
		backgroundSize = bgSize;

		pdaListPos = listPos;
		pdaListSize = listSize;

		pdaContentPos = ctPos;
		pdaContentSize = ctSize;

		mouseScrollAmount = mScrAmount;
		keyScrollAmount = kScrAmount;

		scrollbarWidth = scrBarWidth;
	}

	//===========================================================================
	//
	//
	//
	//
	//===========================================================================

	void PopulatePDAList(void)
	{
		if (!pdaList) return;

		// Build array of PDAs
		Array<Inventory> myPDAs;
		myPDAs.Clear();
		int totalPDAs = GetTotalPDAs();
		for (Inventory item = pmo.Inv; item != NULL; item = item.Inv)
		{
			if (item is "PDA")
			{
				myPDAs.Push(item);
			}
		}

		// Sort PDA array alphabetically
		for (int x = 0; x < myPDAs.Size(); x++)
		{
			for (int y = 0; y < myPDAs.Size() - 1; y++)
			{
				if (StringTable.Localize(myPDAs[y].GetTag()) > StringTable.Localize(myPDAs[y + 1].GetTag()))
				{
					let p = myPDAs[y + 1];
					myPDAs[y + 1] = myPDAs[y];
					myPDAs[y] = p;
				}
			}
		}

		// Add the PDAs to the PDA list
		for (int i = 0; i < myPDAs.Size(); i++)
		{
			if (myPDAs[i])
			{
				pdaList.AddLine(myPDAs[i].GetClassName());
			}
		}
	}

	int GetTotalPDAs(void)
	{
		int totalPDAs = 0;
		for (Inventory item = pmo.Inv; item != NULL; item = item.Inv)
		{
			if (item is "PDA") totalPDAs++;
		}
		return totalPDAs;
	}

	int GetFontHeight(void)
	{
		if (!fnt) return 0;
		return fnt.GetHeight();
	}
}
