// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: PDA Starter Kit v1.1
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2020, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project if you are making money off your
//   mod/project, including commercially-sold games, or via crowdfunding
//   platforms like Kickstarter, Patreon, Kofi and other similar platforms
//
//===========================================================================

//===========================================================================
//
// PDAMenuHandler
// Handles PDA button clicks
//
//===========================================================================

class PDAMenuHandler : PDAHandler
{
	PDAMenu menu;

	override void ButtonClickCommand(PDAButton caller, String command)
	{
		if (!menu) return;
		if (!menu.pdaContentText || !menu.pdaContentBackground) return;

		// Parse the command
		Array<String> strings;
		strings.Clear();
		command.Split(strings, ":");

		// Return if the array has less than 2 strings
		if (strings.Size() < 2) return;

		if ((strings[0] ~== "ActivatePDA"))
		{
			// Play activate sound
			Menu.MenuSound("PDA/Interface/Activate");

			// Mark as read
			let pda = PDA(menu.pmo.FindInventory(strings[1], true));
			if (pda)
			{
				EventHandler.SendNetworkEvent("EV_MarkPDARead:" .. strings[1]);
			}

			class<PDA> cls = strings[1];
			String txt = GetDefaultByType((class<PDA>)(cls)).pdaText;
			String pdaText = StringTable.Localize(txt);

			// Update content image and text
			menu.pdaContentBackground.image = GetDefaultByType((class<PDA>)(cls)).pdaImage;
			menu.pdaContentText.SetText(pdaText);

			// Update current selection
			int index = menu.pdaList.items.Find(PDAColoredButton(caller));
			menu.pdaList.currentSelection = index;
			menu.pdaList.UpdateSelection();

			// Play sound if available
			Sound snd = GetDefaultByType((class<PDA>)(cls)).pdaAudio;
			if (snd)
			{
				// Find the PDA reader and play the sound from it (lol hack)
				let pdaReader = menu.pmo.FindInventory("PDAReader", true);
				if (pdaReader && menu.pmo == players[consoleplayer].mo)
				{
					pdaReader.A_StartSound(snd, CHAN_VOICE, CHANF_UI, snd_menuvolume, ATTN_NONE);
				}
			}
			else
			{
				// Stop all sounds when clicking on a soundless PDA
				EventHandler.SendNetworkEvent("EV_StopPDASound");
			}
		}
	}

	override void ElementHoverChanged(PDAElement caller, string command, bool unhovered)
	{
		if (!unhovered && !caller.disabled)
		{
			Menu.MenuSound("PDA/Interface/Hover");
		}
		Super.ElementHoverChanged(caller, command, unhovered);
	}
}
