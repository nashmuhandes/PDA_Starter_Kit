// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: PDA Starter Kit v1.1
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2020, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project if you are making money off your
//   mod/project, including commercially-sold games, or via crowdfunding
//   platforms like Kickstarter, Patreon, Kofi and other similar platforms
//
//===========================================================================

//===========================================================================
//
// PDAReaderTutorialMenu
//
//===========================================================================


class PDAReaderTutorialMenu : GenericMenu
{
	BrokenLines mMessage;
	Font textFont;
	int destWidth, destHeight;

	override void Init(Menu parent)
	{
		Super.Init(parent);

		String sInvUse;
		Array<int> invUseKeys;

		Bindings.GetAllKeysForCommand(invUseKeys, "invuse");
		sInvUse = KeyBindings.NameAllKeys(invUseKeys);

		String message = StringTable.Localize("$PDA_READER_TUTORIAL");

		textFont = OptionFont();
		mMessage = textFont.BreakLines(String.Format(message, sInvUse), int(300 / NotifyFontScale));
		destWidth = CleanWidth;
		destHeight = CleanHeight;
	}

	override void Drawer(void)
	{
		Super.Drawer();

		int i;
		double y;
		let fontheight = textFont.GetHeight() * NotifyFontScale;

		y = destHeight / 2;

		int c = mMessage.Count();
		y -= c * fontHeight / 2;

		for (i = 0; i < c; i++)
		{
			Screen.DrawText (textFont, Font.CR_UNTRANSLATED, destWidth / 2 - mMessage.StringWidth(i) * NotifyFontScale / 2, y, mMessage.StringAt(i),
				DTA_VirtualWidth, destWidth, DTA_VirtualHeight, destHeight,
				DTA_KeepRatio, true,
				DTA_ScaleX, NotifyFontScale,
				DTA_ScaleY, NotifyFontScale);
			y += fontheight;
		}
	}

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Enter:
			case MKEY_Back:
			default:
				Close();
				break;
		}
		return Super.MenuEvent(mkey, fromcontroller);
	}

	override bool MouseEvent(int type, int x, int y)
	{
		if (type == MOUSE_Release)
		{
			if (MenuEvent(MKEY_Enter, true))
			{
				return true;
			}
		}
		return Super.MouseEvent(type, x, y);
	}
}
