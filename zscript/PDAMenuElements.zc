// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: PDA Starter Kit v1.1
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2020, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project if you are making money off your
//   mod/project, including commercially-sold games, or via crowdfunding
//   platforms like Kickstarter, Patreon, Kofi and other similar platforms
//
//===========================================================================

//===========================================================================
//
// PDAMenuElements
// Base elements and custom widgets used by the PDA menu
//
//===========================================================================

//===========================================================================
//
// PDAScrollableFrame
// Base class for a generic scrollable frame
//
//===========================================================================

class PDAScrollableFrame : PDAFrame
{
	// Reference to the menu is needed for fonts, colours, things like that
	PDAMenu parentMenu;

	// The content frame is dynamically moved and resized
	PDAFrame content;

	PDAScrollBarTrack scrollbarTrack;
	PDAScrollBar scrollbar;

	int mouseX;
	int mouseY;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	PDAScrollableFrame Init(Vector2 pos, Vector2 size, PDAMenu mnu)
	{
		parentMenu = mnu;

		let f = PDAScrollableFrame(Super.Init(pos, size));
		f.Pack(parentMenu.mainFrame);

		// Initial Y size of content frame is 0 because it will be resized as new items are added
		content = PDAFrame(new('PDAFrame').Init((0, 0), (size.X, 0)));
		content.Pack(f);

		// Create the scrollbar element, Y size also resized dynamically
		scrollbarTrack = PDAScrollBarTrack(new('PDAScrollBarTrack').Init((size.X - parentMenu.scrollbarWidth, 0), (parentMenu.scrollbarWidth, size.Y), mnu));
		scrollbarTrack.fillColor = Color(parentMenu.UIColor.R / 2, parentMenu.UIColor.G / 2, parentMenu.UIColor.B / 2);
		scrollbarTrack.pack(f);

		scrollbar = PDAScrollBar(new('PDAScrollBar').Init((size.X - parentMenu.scrollbarWidth, 0), (parentMenu.scrollbarWidth, 0)));
		scrollbar.fillColor = parentMenu.UIColor;
		scrollbar.pack(f);

		return f;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void OnUIEvent(PDAUiEvent ev)
	{
		Super.OnUIEvent(ev);

		if (!content) return;

		if (ev.Type == UIEvent.Type_MouseMove)
		{
			mouseX = ev.mouseX;
			mouseY = ev.mouseY;
		}

		if (IsEnabled() && BoxToScreen().PointCollides((mouseX, mouseY)))
		{
			// Mousewheel scrolling
			if (ev.Type == UIEvent.Type_WheelUp)
			{
				ScrollUp(parentMenu.mouseScrollAmount);
			}
			else if (ev.Type == UIEvent.Type_WheelDown)
			{
				ScrollDown(parentMenu.mouseScrollAmount);
			}
		}
	}

	override void Drawer(void)
	{
		Super.Drawer();

		// Show scroll bar if content is long enough
		if (GetMaxLines() > GetMaxShowableLines())
		{
			scrollbar.disabled = false;
			scrollbar.hidden = false;

			// Update the scrollbar
			double scrollbarFrameHeight = box.size.Y;
			double scrollbarContentHeight = content.box.size.Y;
			double scrollbarRatio = scrollbarFrameHeight / scrollbarContentHeight;
			double scrollBarArea = scrollbarFrameHeight;// - scrollbarArrowHeight * 2;
			double scrollbarHeight = scrollBarArea * scrollbarRatio;
			double scrollBarY = -(content.box.pos.Y * scrollbarRatio);

			scrollbar.box.size.Y = scrollbarHeight;
			scrollbar.box.pos.Y = scrollBarY;
		}
		else
		{
			scrollbar.disabled = true;
			scrollbar.hidden = true;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void Scroll(int scrollAmount)
	{
		content.box.pos.Y += (parentMenu.GetFontHeight() * scrollAmount);
		ClampContentPos();
	}

	void ScrollUp(int scrollAmount = 5)
	{
		if (content.box.pos.Y < 0)
		{
			Scroll(scrollAmount);
		}
	}

	void ScrollDown(int scrollAmount = 5)
	{
		if (content.box.pos.Y > GetLowestPos())
		{
			Scroll(-scrollAmount);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	// This is made overridable because different widgets may have different ways
	// of keeping track of a content's length.
	virtual int GetMaxLines(void) { return 0; }

	int GetMaxShowableLines(void)
	{
		return int(box.size.Y / parentMenu.GetFontHeight());
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	int GetLowestPos(void)
	{
		return -(parentMenu.GetFontHeight() * (GetMaxLines() - GetMaxShowableLines()));
	}

	void ClampContentPos(void)
	{
		if (content.box.pos.Y > 0)
			content.box.pos.Y = 0;
		else if (content.box.pos.Y < GetLowestPos())
			content.box.pos.Y = GetLowestPos();
	}
}

//===========================================================================
//
// PDAScrollBarTrack
//
//===========================================================================

class PDAScrollBarTrack : PDAColoredFrame
{
	PDAMenu parentMenu;
	int mouseX;
	int mouseY;

	PDAScrollBarTrack Init(Vector2 pos, Vector2 size, PDAMenu mnu)
	{
		parentMenu = mnu;
		let f = PDAScrollBarTrack(Super.Init(pos, size));
		return f;
	}

	override void OnUIEvent(PDAUiEvent ev)
	{
		Super.OnUIEvent(ev);

		if (ev.Type == UIEvent.Type_MouseMove)
		{
			mouseX = ev.mouseX;
			mouseY = ev.mouseY;
		}

		let v = ScreenToRel((mouseX, mouseY));
		int yPos = int(v.Y);
		int yPosMax = int(box.size.Y);
		int yPosPercent = 100 * yPos / yPosMax;
		int maxLines = PDAScrollableFrame(master).GetMaxLines();
		int scrollAmount = maxLines * yPosPercent / 100;

		/*
		if (IsEnabled() && BoxToScreen().PointCollides((mouseX, mouseY)))
		{
			Console.Printf("%d, %d, %d%%, %d, %d", yPos, yPosMax, yPosPercent, maxLines, scrollAmount);
		}
		*/

		if (ev.Type == UIEvent.Type_LButtonDown)
		{
			if (IsEnabled() && BoxToScreen().PointCollides((mouseX, mouseY)))
			{
				PDAScrollableFrame(master).content.box.pos.Y = 0;

				for (int i = 0; i < scrollAmount; i++)
				{
					PDAScrollableFrame(master).ScrollDown(1);
				}
			}
		}
	}
}

//===========================================================================
//
// PDAScrollBar
//
//===========================================================================

class PDAScrollBar : PDAColoredFrame
{
}

//===========================================================================
//
// PDAClickableList
// A scrollable frame with clickable items
//
//===========================================================================

class PDAClickableList : PDAScrollableFrame
{
	// Command name to send to the handler when an item is clicked
	String cmdName;

	// Increases every time a new item is added to the list
	int currentLineYPos;

	// Keep track of what is highlighted
	int currentSelection;
	Array<PDAOwnedPDAButton> items;

	// Empty text
	PDALabel emptyLabel;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	PDAClickableList Init(Vector2 pos, Vector2 size, PDAMenu mnu, String cmd)
	{
		cmdName = cmd;
		let f = PDAClickableList(Super.Init(pos, size, mnu));

		String emptyStr = StringTable.Localize("$PDA_EMPTY");
		double emptyLabelXPos = self.box.size.X / 2;
		double emptyLabelYPos = self.box.size.Y / 2;
		double emptyLabelWidth = mnu.fnt.StringWidth(emptyStr);
		emptyLabelXPos -= mnu.scrollbarWidth;
		emptyLabelXPos -= (emptyLabelWidth / 2);
		emptyLabelYPos -= mnu.GetFontHeight();

		emptyLabel = new('PDALabel').Init
		(
			(emptyLabelXPos, emptyLabelYPos),
			(0, 0),
			text: emptyStr,
			fnt: parentMenu.fnt,
			wrap: false,
			autoSize: true,
			textColor: parentMenu.fntColor
		);
		emptyLabel.Pack(self);

		return f;
	}

	override void Ticker(void)
	{
		Super.Ticker();

		// Erase the empty message if the menu isn't empty
		if (items.Size() > 0)
		{
			emptyLabel.Unpack();
		}
	}

	override void OnUIEvent(PDAUiEvent ev)
	{
		Super.OnUIEvent(ev);

		for (int i = 0; i < items.Size(); i++)
		{
			if (items[i].curButtonState == items[i].ButtonState_Hover)
			{
				currentSelection = i;
				UpdateSelection();
				break;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	int GetBottomMostSelection(void)
	{
		return GetMaxShowableLines() - 1;
	}

	int GetTopMostSelection(void)
	{
		return abs(int(content.box.pos.Y) / parentMenu.GetFontHeight());
	}

	void UpdateSelection(void)
	{
		for (int i = 0; i < items.Size(); i++)
		{
			if (items[i])
			{
				items[i].highlighted = false;

				if (currentSelection >= 0)
				{
					items[currentSelection].highlighted = true;
				}
			}
		}
	}

	void SelectPreviousItem(void)
	{
		int t = 0;
		if (currentSelection > t)
		{
			currentSelection--;
			UpdateSelection();
			Menu.MenuSound("PDA/Interface/Hover");
		}

		if (currentSelection < GetTopMostSelection())
		{
			ScrollUp(1);
		}
	}

	void SelectNextItem(void)
	{
		int t = (GetMaxLines() - 1);
		if (currentSelection < t)
		{
			currentSelection++;
			UpdateSelection();
			Menu.MenuSound("PDA/Interface/Hover");
		}

		if (currentSelection > GetBottomMostSelection())
		{
			ScrollDown(1);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override int GetMaxLines(void)
	{
		return int(currentLineYPos / parentMenu.GetFontHeight());
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	virtual void AddLine(String newItem)
	{
		if (!content) return;

		class<Actor> cls = newItem;
		String newItemTitle = StringTable.Localize(GetDefaultByType((class<Actor>)(cls)).GetTag());

		// Buttons and text have to be separate because
		// button text is automatically center-aligned >_<

		// Button element
		let btn = PDAOwnedPDAButton(new('PDAOwnedPDAButton').Init
		(
			(0, currentLineYPos),
			(box.size.X - parentMenu.scrollbarWidth, parentMenu.GetFontHeight()),
			cmdHandler: parentMenu.handler,
			command: cmdName .. ":" .. newItem
		));
		btn.SetTexture
		(
			"TNT1A0",
			"TNT1A0",
			"TNT1A0",
			""
		);
		btn.fillColor = parentMenu.UIColor;
		btn.Pack(content);
		items.Push(btn);

		// Text element
		let txt = new('PDALabel').Init
		(
			(0, currentLineYPos),
			(0, 0),
			text: newItemTitle,
			fnt: parentMenu.fnt,
			wrap: false,
			autoSize: true,
			textColor: parentMenu.fntColor
		);
		txt.Pack(content);

		// Increase the Y size of the content frame
		content.box.size.Y += parentMenu.GetFontHeight();

		// Increase Y position of the next item to add
		currentLineYPos += parentMenu.GetFontHeight();
	}
}

//===========================================================================
//
// PDAOwnedPDALabel
// A subclass of PDALabel that holds a reference to the PDA item class
// Used to determine read/unread status
//
//===========================================================================

class PDAOwnedPDALabel : PDALabel
{
	PDAMenu parentMenu;
	class<PDA> pdacls;

	override void Drawer(void)
	{
		let pmo = players[consoleplayer].mo;
		if (pmo)
		{
			// Get read/unread status
			let pdainv = PDA(pmo.FindInventory(pdacls, true));
			if (pdainv)
			{
				textColor = pdainv.isRead ? parentMenu.pdaListReadColor : parentMenu.pdaListUnreadColor;
			}
			Super.Drawer();
		}
		else
		{
			Console.Printf("PDAOwnedPDALabel can't find Player MO (shouldn't happen)!");
		}
	}
}

//===========================================================================
//
// PDAOwnedPDAsList
// A subclass of PDAClickableList with a special label specific to owned PDAs
//
//===========================================================================

class PDAOwnedPDAsList : PDAClickableList
{
	override void AddLine(String newItem)
	{
		if (!content) return;

		class<Actor> cls = newItem;
		String newItemTitle = StringTable.Localize(GetDefaultByType((class<Actor>)(cls)).GetTag());

		// Buttons and text have to be separate because
		// button text is automatically center-aligned >_<

		// Button element
		let btn = PDAOwnedPDAButton(new('PDAOwnedPDAButton').Init
		(
			(0, currentLineYPos),
			(box.size.X - parentMenu.scrollbarWidth, parentMenu.GetFontHeight()),
			cmdHandler: parentMenu.handler,
			command: cmdName .. ":" .. newItem
		));
		btn.SetTexture
		(
			"TNT1A0",
			"TNT1A0",
			"TNT1A0",
			""
		);
		btn.fillColor = parentMenu.UIColor;
		btn.Pack(content);
		items.Push(btn);

		// Text element
		let txt = new('PDAOwnedPDALabel').Init
		(
			(0, currentLineYPos),
			(0, 0),
			text: newItemTitle,
			fnt: parentMenu.fnt,
			wrap: false,
			autoSize: true,
			textColor: parentMenu.fntColor
		);
		class<PDA> pdacls = newItem;
		PDAOwnedPDALabel(txt).pdacls = pdacls;
		PDAOwnedPDALabel(txt).parentMenu = parentMenu;
		txt.Pack(content);

		// Increase the Y size of the content frame
		content.box.size.Y += parentMenu.GetFontHeight();

		// Increase Y position of the next item to add
		currentLineYPos += parentMenu.GetFontHeight();
	}
}

//===========================================================================
//
// PDAOwnedPDAButton
//
//===========================================================================

class PDAOwnedPDAButton : PDAColoredButton
{
	bool highlighted;

	override void Drawer(void)
	{
		Super.Drawer();

		if (highlighted)
		{
			Fill((0, 0), box.size, fillColor, 1.0);
		}
	}
}

//===========================================================================
//
// PDAContentText
// A scrollable frame with text
//
//===========================================================================

class PDAContentText : PDAScrollableFrame
{
	PDALabel text;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	PDAContentText Init(Vector2 pos, Vector2 size, PDAMenu mnu)
	{
		let f = PDAContentText(Super.Init(pos, size, mnu));

		// Take scrollbar size into account (and add some padding)
		// (I hope the width of a "0" is wide enough LOL)
		Vector2 sizeAdjusted = size;
		sizeAdjusted.X -= (parentMenu.scrollbarWidth + parentMenu.fnt.GetCharWidth("0"));

		text = new('PDALabel').Init
		(
			(0, 0),
			sizeAdjusted,
			text: "",
			fnt: parentMenu.fnt,
			wrap: true,
			autoSize: true,
			textColor: parentMenu.fntColor
		);
		text.Pack(content);

		return f;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SetText(String txt)
	{
		text.text = txt;

		// Reset the content position and size
		content.box.pos.Y = 0;
		content.box.size.Y = 0;

		// Increase the Y size of the content frame to the number of lines of text
		BrokenLines textLines = parentMenu.fnt.breakLines(text.text, int(text.box.size.x / text.textScale));
		for (int i = 0; i < textLines.count(); i++)
		{
			content.box.size.Y += parentMenu.GetFontHeight();
		}
	}

	override int GetMaxLines(void)
	{
		BrokenLines textLines = parentMenu.fnt.breakLines(text.text, int(text.box.size.x / text.textScale));
		return int((parentMenu.GetFontHeight() * textLines.count()) / parentMenu.GetFontHeight());
	}
}

//===========================================================================
//
// PDAColoredFrame
// Colorizable PDAFrame
//
//===========================================================================

class PDAColoredFrame : PDAFrame
{
	Color fillColor;
	override void Drawer(void)
	{
		Super.Drawer();
		Fill((0, 0), box.size, fillColor, 1.0);
	}
}

//===========================================================================
//
// PDAColoredButton
// Colorizable PDAButton
//
//===========================================================================

class PDAColoredButton : PDAButton
{
	Color fillColor;
	override void Drawer(void)
	{
		Super.Drawer();

		if (curButtonState == ButtonState_Hover)
		{
			Fill((0, 0), box.size, fillColor, 1.0);
		}
	}
}
